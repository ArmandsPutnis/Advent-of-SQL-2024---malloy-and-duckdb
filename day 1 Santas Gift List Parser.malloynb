>>>markdown
https://adventofsql.com/challenges/1
>>>sql
--- connection: duck
select current_database() as duckdb_db
>>>sql
// data should be loaded already in the duckdb, in case it's not working copy/paste ./sql files/day1.sql and run
>>>malloy
// this part is not really nessasary, made it for switching the table name - checking the answer
source: raw_children is duck.table("children") -- change table name  children_sample for checking answer
source: raw_wish_lists is duck.table("wish_lists") -- change table name  wish_lists_sample for checking answer
source: raw_toy_catalogue is duck.table("toy_catalogue") -- change table name  toy_catalogue_sample for checking answer
>>>malloy
source: children is raw_children extend {
    measure:
      count_children is count(child_id)
      avg_children_age is avg(age)
    primary_key: child_id
}
>>>malloy
source: toy_catalogue is raw_toy_catalogue extend {
    measure:
      total_toys_in_workshop is count(toy_id)
    dimension:
      gift_complexity is
        pick 'Simple Gift' when difficulty_to_make= 1
        pick 'Modarate Gift' when difficulty_to_make = 2
        else 'Complex Gift'
      workshop_assignment is
        pick 'Outside Workshop' when category = 'outdoor'
        pick 'Learning Workshop' when category = 'educational'
        else 'General Workshop'
     primary_key: toy_id



}
>>>malloy
source: wish_lists is raw_wish_lists extend {
    dimension:
      primary_wish is json_extract_string!(wishes, '$.first_choice')::string --::string needed for join -Unsupported SQL native type 'json' not allowed(can't join on json)
      backup_wish is json_extract_string!(wishes, '$.second_choice')::string
      favorite_color is json_extract_string!(wishes, '$.colors[0]')::string
      color_count is json_array_length!(wishes, '$.colors')::number
    measure:
      requests is count()
      total_children_with_wishes is count(child_id)
      avg_color_count is avg(color_count)

    join_one: children with child_id
    join_one: toy_catalogue on toy_catalogue.toy_name = primary_wish
}
>>>malloy
/// Answer to the question table _sampe
run: wish_lists -> {
   select:
      children.child_id
      children.name
      primary_wish
      backup_wish
      favorite_color
      color_count
      toy_catalogue.gift_complexity
      toy_catalogue.workshop_assignment
    }
>>>markdown
### Check the answer
| name | primary_wish | backup_wish | favorite_color | color_count | gift_complexity | workshop_assignment |
|---|---|---|---|---|---|---|
| Tommy | bike | blocks | red | 2 | Complex Gift | Outside Workshop |
| Sally | doll | books | pink | 2 | Moderate Gift | General Workshop |
| Bobby | blocks | bike | green | 1 | Simple Gift | Learning Workshop |
>>>markdown
# Improvisation
### let's build some ideas for santa a dashboard
>>>malloy
-- only idea did not workout was:
-- union primary_wish and backup_wish
-- to get the most requested toy, can you do it?
source: santas_dashboard is wish_lists extend{
  view: `Children Database` is {
            aggregate:
         `Total Children` is children.count_children
         `Average Age` is children.avg_children_age
  }
  view: ` Toy Catalogue ` is {
        group_by : toy_catalogue.gift_complexity
        aggregate: workshop_toy_count is toy_catalogue.total_toys_in_workshop
  }
  view: `Toy list by Workshop` is {
    group_by: workshop_name is toy_catalogue.workshop_assignment
      aggregate: toy_catalogue.total_toys_in_workshop
  }
    view: most_popular_primary_wish is {
      group_by: primary_wish
      aggregate: requests
    }
    view: most_popular_backup_wish is {
      group_by: backup_wish
      aggregate: requests
    }

    view: primary_wish_top_5_backup is {
      group_by: primary_wish
      aggregate: requests

      nest: top5_backup_list is {
        group_by: backup_wish
        aggregate: requests
        top: 5
      }
    }

    view: favorite_toy_color is {
      group_by: favorite_color
      aggregate: requests
    }

    view: requests_month is {
      group_by: submitted_date.month
      aggregate: requests
    }

    view: wish_fulfillment_by_department_complexity is {
      group_by: toy_catalogue.workshop_assignment
      aggregate: requests
      nest: complexity is {
      group_by: toy_catalogue.gift_complexity
      aggregate: requests
      }

    }

}
# dashboard
run: santas_dashboard-> {
   nest:
     `Children Database`
     ` Toy Catalogue `
     `Toy list by Workshop`
     favorite_toy_color
     most_popular_primary_wish
     most_popular_backup_wish
     primary_wish_top_5_backup
     wish_fulfillment_by_department_complexity
     # bar_chart
     requests_month

}
>>>malloy
